#!/bin/bash

# =============================================================================
# Scripts de Build pour FitUploader - Cross-Platform
# =============================================================================

echo "üöÄ FitUploader Build Scripts"
echo "============================="

# Fonction pour d√©tecter l'OS
detect_os() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "win32" ]]; then
        echo "windows"
    else
        echo "linux"
    fi
}

# Configuration
APP_NAME="FitUploader"
SCRIPT_NAME="fituploader.py"
VERSION="1.0.0"
OS_TYPE=$(detect_os)

echo "üìã Configuration d√©tect√©e:"
echo "   - OS: $OS_TYPE"
echo "   - App: $APP_NAME"
echo "   - Script: $SCRIPT_NAME"
echo ""

# =============================================================================
# BUILD POUR macOS
# =============================================================================
build_macos() {
    echo "üçé Build pour macOS"
    echo "==================="
    
    # V√©rifier la pr√©sence de l'ic√¥ne
    if [ ! -f "FitUploader.icns" ]; then
        echo "‚ùå Erreur: FitUploader.icns introuvable"
        echo "üí° Conseil: Convertissez votre PNG en ICNS avec:"
        echo "   sips -s format icns FitUploader.png --out FitUploader.icns"
        exit 1
    fi
    
    echo "üì¶ Cr√©ation de l'ex√©cutable macOS..."
    
    pyinstaller \
        --onefile \
        --windowed \
        --name="$APP_NAME" \
        --icon="FitUploader.icns" \
        --add-data="FitUploader.icns:." \
        --hidden-import="garth" \
        --hidden-import="fit_tool" \
        --hidden-import="tkinter" \
        --hidden-import="threading" \
        --hidden-import="queue" \
        --hidden-import="pathlib" \
        --hidden-import="json" \
        --hidden-import="hashlib" \
        --hidden-import="logging.handlers" \
        --exclude-module="PIL" \
        --exclude-module="matplotlib" \
        --exclude-module="numpy" \
        --exclude-module="pandas" \
        --clean \
        --noconfirm \
        "$SCRIPT_NAME"
    
    # Cr√©er un bundle d'application macOS (optionnel)
    echo "üì± Cr√©ation du bundle .app..."
    
    pyinstaller \
        --onedir \
        --windowed \
        --name="$APP_NAME" \
        --icon="FitUploader.icns" \
        --add-data="FitUploader.icns:." \
        --hidden-import="garth" \
        --hidden-import="fit_tool" \
        --clean \
        --noconfirm \
        "$SCRIPT_NAME"
    
    echo "‚úÖ Build macOS termin√©!"
    echo "üìÅ Fichiers g√©n√©r√©s:"
    echo "   - dist/$APP_NAME (ex√©cutable unique)"
    echo "   - dist/$APP_NAME.app (bundle d'application)"
}

# =============================================================================
# BUILD POUR WINDOWS
# =============================================================================
build_windows() {
    echo "ü™ü Build pour Windows"
    echo "===================="
    
    # V√©rifier la pr√©sence de l'ic√¥ne
    if [ ! -f "FitUploader.ico" ]; then
        echo "‚ùå Erreur: FitUploader.ico introuvable"
        echo "üí° Conseil: Convertissez votre PNG en ICO avec un outil en ligne"
        echo "   ou utilisez ImageMagick: convert FitUploader.png FitUploader.ico"
        exit 1
    fi
    
    echo "üì¶ Cr√©ation de l'ex√©cutable Windows..."
    
    pyinstaller \
        --onefile \
        --windowed \
        --name="$APP_NAME" \
        --icon="FitUploader.ico" \
        --add-data="FitUploader.ico;." \
        --hidden-import="garth" \
        --hidden-import="fit_tool" \
        --hidden-import="tkinter" \
        --hidden-import="threading" \
        --hidden-import="queue" \
        --hidden-import="pathlib" \
        --hidden-import="json" \
        --hidden-import="hashlib" \
        --hidden-import="logging.handlers" \
        --exclude-module="PIL" \
        --exclude-module="matplotlib" \
        --exclude-module="numpy" \
        --exclude-module="pandas" \
        --clean \
        --noconfirm \
        "$SCRIPT_NAME"
    
    echo "‚úÖ Build Windows termin√©!"
    echo "üìÅ Fichier g√©n√©r√©: dist/$APP_NAME.exe"
}

# =============================================================================
# BUILD AVANC√â AVEC SPEC FILE
# =============================================================================
create_spec_file() {
    echo "‚öôÔ∏è Cr√©ation du fichier .spec personnalis√©..."
    
    cat > "${APP_NAME}.spec" << EOF
# -*- mode: python ; coding: utf-8 -*-

import sys
import os
from pathlib import Path

# Configuration
APP_NAME = '$APP_NAME'
SCRIPT_PATH = '$SCRIPT_NAME'
VERSION = '$VERSION'

# D√©tection de l'OS
is_macos = sys.platform == 'darwin'
is_windows = sys.platform == 'win32'

# Ic√¥ne selon l'OS
if is_macos:
    icon_file = 'FitUploader.icns'
elif is_windows:
    icon_file = 'FitUploader.ico'
else:
    icon_file = 'FitUploader.png'

# Donn√©es √† inclure
datas = []
if os.path.exists(icon_file):
    if is_windows:
        datas.append((icon_file, '.'))
    else:
        datas.append((icon_file, '.'))

# Modules cach√©s essentiels
hiddenimports = [
    'garth',
    'fit_tool',
    'tkinter',
    'tkinter.ttk',
    'threading',
    'queue',
    'pathlib',
    'json',
    'hashlib',
    'logging',
    'logging.handlers',
    'subprocess',
    'datetime',
    'enum',
    'dataclasses',
    'functools',
    'weakref',
    'os',
    'sys',
    'time',
    'concurrent.futures'
]

# Modules √† exclure pour r√©duire la taille
excludes = [
    'PIL',
    'matplotlib',
    'numpy',
    'pandas',
    'scipy',
    'PyQt5',
    'PyQt6',
    'PySide2',
    'PySide6'
]

a = Analysis(
    [SCRIPT_PATH],
    pathex=[],
    binaries=[],
    datas=datas,
    hiddenimports=hiddenimports,
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=excludes,
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=None,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=None)

# Configuration de l'ex√©cutable
exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name=APP_NAME,
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=icon_file if os.path.exists(icon_file) else None,
)

# Bundle pour macOS
if is_macos:
    app = BUNDLE(
        exe,
        name=f'{APP_NAME}.app',
        icon=icon_file,
        bundle_identifier=f'com.fituploader.{APP_NAME.lower()}',
        version=VERSION,
        info_plist={
            'CFBundleDisplayName': APP_NAME,
            'CFBundleVersion': VERSION,
            'CFBundleShortVersionString': VERSION,
            'NSHighResolutionCapable': 'True',
            'LSMinimumSystemVersion': '10.14.0',
        }
    )
EOF

    echo "‚úÖ Fichier ${APP_NAME}.spec cr√©√©"
}

# =============================================================================
# OPTIMISATIONS ET V√âRIFICATIONS
# =============================================================================
verify_build() {
    echo "üîç V√©rification du build..."
    
    if [ "$OS_TYPE" = "macos" ]; then
        if [ -f "dist/$APP_NAME" ]; then
            size=$(du -h "dist/$APP_NAME" | cut -f1)
            echo "‚úÖ Ex√©cutable cr√©√©: $size"
            
            # Test rapide
            echo "üß™ Test de l'ex√©cutable..."
            ./dist/$APP_NAME --version 2>/dev/null && echo "‚úÖ Test r√©ussi" || echo "‚ö†Ô∏è Test √©chou√© (normal si --version n'est pas impl√©ment√©)"
        fi
        
        if [ -d "dist/$APP_NAME.app" ]; then
            size=$(du -hs "dist/$APP_NAME.app" | cut -f1)
            echo "‚úÖ Bundle .app cr√©√©: $size"
        fi
    elif [ "$OS_TYPE" = "windows" ]; then
        if [ -f "dist/$APP_NAME.exe" ]; then
            size=$(du -h "dist/$APP_NAME.exe" | cut -f1)
            echo "‚úÖ Ex√©cutable Windows cr√©√©: $size"
        fi
    fi
}

optimize_build() {
    echo "‚ö° Optimisations du build..."
    
    # UPX compression (si disponible)
    if command -v upx &> /dev/null; then
        echo "üì¶ Compression UPX disponible"
        if [ -f "dist/$APP_NAME" ]; then
            upx --best "dist/$APP_NAME" 2>/dev/null && echo "‚úÖ Ex√©cutable compress√©"
        fi
        if [ -f "dist/$APP_NAME.exe" ]; then
            upx --best "dist/$APP_NAME.exe" 2>/dev/null && echo "‚úÖ Ex√©cutable Windows compress√©"
        fi
    else
        echo "üí° Conseil: Installez UPX pour compresser l'ex√©cutable"
        echo "   macOS: brew install upx"
        echo "   Windows: choco install upx"
    fi
}

cleanup_build() {
    echo "üßπ Nettoyage des fichiers temporaires..."
    
    # Supprimer les dossiers temporaires
    rm -rf build/
    rm -rf __pycache__/
    
    # Garder seulement le dossier dist avec les ex√©cutables
    echo "‚úÖ Nettoyage termin√©"
    echo "üìÅ Fichiers conserv√©s dans le dossier 'dist/'"
}

# =============================================================================
# MENU PRINCIPAL
# =============================================================================
main_menu() {
    echo "Choisissez une option:"
    echo "1) Build pour l'OS actuel ($OS_TYPE)"
    echo "2) Build avec fichier .spec personnalis√©"
    echo "3) Build optimis√© (avec compression)"
    echo "4) Nettoyer les builds pr√©c√©dents"
    echo "5) Cr√©er tous les formats"
    echo "6) Quitter"
    echo ""
    read -p "Votre choix [1-6]: " choice
    
    case $choice in
        1)
            if [ "$OS_TYPE" = "macos" ]; then
                build_macos
            elif [ "$OS_TYPE" = "windows" ]; then
                build_windows
            else
                echo "‚ùå OS non support√© pour ce script"
            fi
            verify_build
            ;;
        2)
            create_spec_file
            echo "üì¶ Build avec fichier .spec..."
            pyinstaller --clean --noconfirm "${APP_NAME}.spec"
            verify_build
            ;;
        3)
            main_menu # Relancer pour choisir le build
            optimize_build
            ;;
        4)
            cleanup_build
            ;;
        5)
            if [ "$OS_TYPE" = "macos" ]; then
                build_macos
            elif [ "$OS_TYPE" = "windows" ]; then
                build_windows
            fi
            verify_build
            optimize_build
            ;;
        6)
            echo "üëã Au revoir!"
            exit 0
            ;;
        *)
            echo "‚ùå Choix invalide"
            main_menu
            ;;
    esac
}

# =============================================================================
# V√âRIFICATIONS PR√âALABLES
# =============================================================================
check_requirements() {
    echo "üîç V√©rification des pr√©requis..."
    
    # V√©rifier Python
    if ! command -v python &> /dev/null && ! command -v python3 &> /dev/null; then
        echo "‚ùå Python non trouv√©"
        exit 1
    fi
    
    # V√©rifier PyInstaller
    if ! python -c "import PyInstaller" 2>/dev/null && ! python3 -c "import PyInstaller" 2>/dev/null; then
        echo "‚ùå PyInstaller non install√©"
        echo "üí° Installation: pip install pyinstaller"
        exit 1
    fi
    
    # V√©rifier le script principal
    if [ ! -f "$SCRIPT_NAME" ]; then
        echo "‚ùå Script principal '$SCRIPT_NAME' non trouv√©"
        exit 1
    fi
    
    echo "‚úÖ Tous les pr√©requis sont satisfaits"
    echo ""
}

# =============================================================================
# LANCEMENT DU SCRIPT
# =============================================================================
if [ "$#" -eq 0 ]; then
    check_requirements
    main_menu
else
    # Mode ligne de commande direct
    case "$1" in
        "macos")
            build_macos
            verify_build
            ;;
        "windows")
            build_windows
            verify_build
            ;;
        "spec")
            create_spec_file
            pyinstaller --clean --noconfirm "${APP_NAME}.spec"
            verify_build
            ;;
        "clean")
            cleanup_build
            ;;
        *)
            echo "Usage: $0 [macos|windows|spec|clean]"
            echo "Ou lancez sans argument pour le menu interactif"
            ;;
    esac
fi